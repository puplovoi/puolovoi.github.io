<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>实验一</title>
    <url>/2024/10/05/558433c7/</url>
    <content><![CDATA[<p><img src="/bd20261029c3348270a385b9a6d6a62.jpg"></p>
<pre><code class="c++">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

// 定义单链表节点结构体
typedef struct LNode &#123;
    char data;
    struct LNode* next;
&#125; LinkNode;
// 初始化链表
 void InitList(LinkNode *&amp;L);
// 尾插法插入节点
 void Insert(LinkNode *&amp;L,char x);
 // 打印链表
 void PrintList(LinkNode *L);
 // 销毁链表
 void DestroyList(LinkNode *&amp;L);
 // 输出单链表的长度
 int Length(LinkNode *L);
//输出单链表第x个元素
void GetElem(LinkNode *L,int x);
//输出某个元素的位置
void LocateElem(LinkNode *L,char x);
//尾插法在第a个位置插入元素x
void InsertElem(LinkNode *&amp;L,char x,int a);
 // 输出单链表是否为空
 int IsEmpty(LinkNode *L);
//删除链表第a个元素
void DeleteElem(LinkNode *&amp;L,int a);

int main()
&#123;
    LinkNode *L=NULL;
    InitList(L);//初始化链表
    Insert(L,&#39;a&#39;);
    Insert(L,&#39;b&#39;);
    Insert(L,&#39;c&#39;);
    Insert(L,&#39;d&#39;);
    Insert(L,&#39;e&#39;);
    printf(&quot;链表插入元素后:\n&quot;);
    PrintList(L);
    printf(&quot;链表的长度为:%d\n&quot;,Length(L)); //输出链表长度
    if(IsEmpty(L))    //链表为空
    &#123;
        printf(&quot;链表为空!\n&quot;);
    &#125;
    else    //链表不为空
    &#123;
        printf(&quot;链表不为空!\n&quot;);
    &#125;
    LocateElem(L,&#39;c&#39;);    //输出c元素位置
    GetElem(L,3);    //输出第3个元素
    InsertElem(L,&#39;f&#39;,4); //在第4个位置插入元素f
    printf(&quot;插入元素f后:\n&quot;);
    PrintList(L);
    DeleteElem(L,2); //删除第2个元素
    DestroyList(L);
    return 0;
&#125;

 void InitList(LinkNode *&amp;L)
 &#123;
    L=(LinkNode *)malloc(sizeof(LinkNode));    //创建头结点
    L-&gt;next=NULL;
 &#125;

  void Insert(LinkNode *&amp;L,char x)
 &#123;
    LinkNode *p=(LinkNode *)malloc(sizeof(LinkNode));
    p-&gt;data=x;
    p-&gt;next=NULL;
    LinkNode *q=L;
    while(q-&gt;next!=NULL)    //找到尾节点
    &#123;
        q=q-&gt;next;
    &#125;
    q-&gt;next=p;    //插入到尾节点后
 &#125;

  void PrintList(LinkNode *L)
 &#123;
    if(L-&gt;next==NULL)    //链表为空
    &#123;
        printf(&quot;链表为空!\n&quot;);
        return;
    &#125;
    LinkNode *p=L-&gt;next;
    while(p!=NULL)    //遍历链表
    &#123;
        printf(&quot;%c &quot;,p-&gt;data);
        p=p-&gt;next;
    &#125;
    printf(&quot;\n&quot;);
 &#125;

  void DestroyList(LinkNode *&amp;L)
 &#123;
    LinkNode *p=L-&gt;next;
    LinkNode *q;
    while(p!=NULL)    //遍历链表
    &#123;
        q=p;
        p=p-&gt;next;
        free(q);    //释放节点
    &#125;
    free(L);    //释放头结点
    L=NULL;
 &#125;

 int Length(LinkNode *L)
 &#123;
    int len=0;
    LinkNode *p=L-&gt;next;
    while(p!=NULL)    //遍历链表
    &#123;
        len++;
        p=p-&gt;next;
    &#125;
    return len;
 &#125; 

void GetElem(LinkNode *L,int x)
&#123;
    int i=1;
    LinkNode *p=L-&gt;next;
    while(p!=NULL)    //遍历链表
    &#123;
        if(i==x)    //找到第x个元素
        &#123;
            printf(&quot;%d的元素是:%c\n&quot;, x, p-&gt;data); //输出元素
            return;
        &#125;
        i++;
        p=p-&gt;next;
    &#125;
    printf(&quot;未找到第%d个元素!\n&quot;, x);
    return;    //未找到第x个元素
&#125;

void LocateElem(LinkNode *L,char x)
&#123;
    int i=0;
    LinkNode *p=L;
    while(p!=NULL)    //遍历链表
    &#123;
        if(p-&gt;data==x)    //找到元素
        &#123;
            printf(&quot;%c的位置是:%d\n&quot;, x, i); //输出元素位置
            return;
        &#125;
        i++;
        p=p-&gt;next;
    &#125;
    printf(&quot;%c元素不存在!\n&quot;, x);
    return;
&#125;

void InsertElem(LinkNode *&amp;L,char x,int a)
&#123;
    LinkNode *p = L;
    int i = 1;
    while (p!=NULL &amp;&amp; i&lt;a)    //找到第a-1个元素
    &#123;
        p=p-&gt;next;
        i++;
    &#125;
     if (p==NULL)    //链表长度小于a，插入到尾节点后   
     &#123;
        Insert(L,x);
        return;
     &#125;
     LinkNode *q=(LinkNode *)malloc(sizeof(LinkNode));    //创建新节点
     q-&gt;data=x;
     q-&gt;next=p-&gt;next;
     p-&gt;next=q;
&#125;

 int IsEmpty(LinkNode *L)
 &#123;
    return L-&gt;next==NULL;
 &#125;

 void DeleteElem(LinkNode *&amp;L,int a)
&#123;
    LinkNode *p=L;
    int i=1;
    while(p!=NULL &amp;&amp; i&lt;a)    //找到第a-1个元素
    &#123;
        p=p-&gt;next;
        i++;
    &#125;
    if(p==NULL)    //链表长度小于a，不删除
    &#123;
        printf(&quot;链表长度小于%d，不删除!\n&quot;, a);
        printf(&quot;链表未改变:\n&quot;);
        PrintList(L);
        return;
    &#125;
    LinkNode *q=p-&gt;next;
    p-&gt;next=q-&gt;next;
    free(q);    //释放节点
    printf(&quot;删除第%d个元素后:\n&quot;, a);
    PrintList(L);
&#125;
</code></pre>
]]></content>
      <categories>
        <category>数据结构</category>
        <category>实验</category>
      </categories>
  </entry>
</search>
